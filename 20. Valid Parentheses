Approach : Using Stack 
  1 :  push all the opening b races in the stack 
  2 : then peak ikn stgack and match it with its closing braces , if match , then true , otherwise false;

TimeComplexity : O(n)
SpaceComplexity : O(n)

class Solution {
    public boolean isValid(String s) {
        Stack<Character> stk = new Stack<>();

        for(int i=0;i<s.length();i++){

            char ch = s.charAt(i);

            // opening 
            if(ch =='(' ||ch =='{' ||ch =='['){
                stk.push(ch);
            }else{
                //closing
                if(stk.isEmpty()){
                    return false;
                }
                if((stk.peek()=='(' && ch ==')')
                    || (stk.peek()=='{' && ch =='}')
                    || (stk.peek()=='[' && ch ==']')){
                        stk.pop();
                    }else{
                        return false;
                    }
            }
        }
        if(stk.isEmpty()){
            return true;
        }
        else{
            return false;
        }
        
    }
}

******************************************************************************************

2nd Approach :
  1 :  Traverse the string , add the closing braces in the stack 
  2 :  then pop the braces when open bracket of found , otherweise leave it 

TimeCOmplexity : O(n)
SpacerComplaxity : O(n)


class Solution {
    public boolean isValid(String s) {
        Stack<Character> stk = new Stack<>();
        for(char c : s.toCharArray() ){
            if(c == '('){
                stk.push(')');
            }else if( c == '{'){
                stk.push('}');
            }
            else if(c == '['){
                stk.push(']');
            }
            else if(stk.isEmpty() || stk.pop() != c){
                return false;
            }
            
        }
        return stk.isEmpty();
        }
}





