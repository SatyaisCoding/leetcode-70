Approach : 
  1 : there is nothing special or tricky to tell about this question 
  2 :  you just have to traverse top -> right -> bottom - > left , and print it 

TimeComplexity : O(m*n)
SpaceComplexity : O(1)


class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> ans = new ArrayList<>();

        int top = 0 , bottom = matrix.length-1;
        int left = 0, right = matrix[0].length-1;
        
        while(top<=bottom && left<=right){
            
            // topRow 
            for(int i= left ;i<=right;i++){
                ans.add(matrix[top][i]);
            }
            top++;

            // rightColumn
            for(int i =top;i<=bottom;i++){
                ans.add(matrix[i][right]);
            }
            right--;

            if(top<=bottom){
                //bottomRow
                for(int i= right;i>= left;i--){
                    ans.add(matrix[bottom][i]);
                }
                bottom--;
            }
            if(left<=right){
                //leftColumn
                for(int i = bottom;i>=top;i--){
                    ans.add(matrix[i][left]);
                }
                left++;
            }
            
        }
        return ans;
    }
}
