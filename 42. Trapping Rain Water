Approach : Naive 

TimeComplexity : O(n2)
SpaceComplexity : O(1)

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        int waterTrapped = 0;

        for (int i = 1; i < n - 1; i++) {
            // Find max on the left
            int leftMax = height[i];
            for (int j = 0; j < i; j++) {
                leftMax = Math.max(leftMax, height[j]);
            }

            // Find max on the right
            int rightMax = height[i];
            for (int j = i + 1; j < n; j++) {
                rightMax = Math.max(rightMax, height[j]);
            }

            // Calculate water above current bar
            int trapped = Math.min(leftMax, rightMax) - height[i];
            if (trapped > 0) {
                waterTrapped += trapped;
            }
        }

        return waterTrapped;
    }
}

Approach : Using Auxilary Array 

TimeComplexity : O(n)
SpaceCOmplexity : O(n)

class Solution {
    public int trap(int[] height) {
        int n = height.length;
        if (n == 0) return 0;

        int[] leftMax = new int[n];
        int[] rightMax = new int[n];
        int waterTrapped = 0;

        // Fill leftMax array
        leftMax[0] = height[0];
        for (int i = 1; i < n; i++) {
            leftMax[i] = Math.max(height[i], leftMax[i - 1]);
        }

        // Fill rightMax array
        rightMax[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            rightMax[i] = Math.max(height[i], rightMax[i + 1]);
        }

        // Calculate trapped water using precomputed max arrays
        for (int i = 0; i < n; i++) {
            int trapped = Math.min(leftMax[i], rightMax[i]) - height[i];
            if (trapped > 0) {
                waterTrapped += trapped;
            }
        }

        return waterTrapped;
    }
}


Approach : Using 2 PPointer 

TimeComplexity : O(n)
SpaceComplexity : O(1)


class Solution {
    public int trap(int[] height) {
        int left = 0, right = height.length - 1;
        int leftMax = 0, rightMax = 0;
        int waterTrapped = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                // Water depends on leftMax
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    waterTrapped += leftMax - height[left];
                }
                left++;
            } else {
                // Water depends on rightMax
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    waterTrapped += rightMax - height[right];
                }
                right--;
            }
        }

        return waterTrapped;
    }
}
