Approach : 
  1 : Traverse to the node just before left and reverse the sublist from left to right using standard reversal logic.
  2 : Reconnect the reversed sublist with the remaining parts of the original list using stored pointers

TimeComplexity : O(n)
SpaceComplexity : O(1)


class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        //Maker of the nodes before reversing
        ListNode leftPre = dummy;
        ListNode currNode = head;

        for(int i=0;i<left-1;i++){
            leftPre = leftPre.next;
            currNode = currNode.next;
        }

        //make marker to node from where we start to reversing the List
        ListNode subListHead = currNode;
        ListNode preNode = null;

        for(int i=0;i<=right-left ; i++){
            ListNode nextNode = currNode.next;
            currNode.next = preNode;
            preNode = currNode;
            currNode = nextNode;
        }
        // Joinging the peiece
        leftPre.next = preNode;
        subListHead.next = currNode;


        return dummy.next;
    }
