Approach : Using Stack
  Step 1 : Understand what "span" means
            * Span of a day = Number of consecutive days (up to that day) the stock price was less than or equal to the current day's price.
            * Example:
              For prices [100, 80, 60, 70, 60, 75, 85],
              the span array is: [1, 1, 1, 2, 1, 4, 6]
  Step 2: Use a Stack
          * Use a stack to keep track of indices of prices.
          * The stack helps find the last day where price was greater than today’s price.
  
  Step 3: Start with day 0
          * For the first day, span is always 1 (no previous days to compare) 
          * Push index 0 into the stack.

  Step 4: Loop through remaining days (from i = 1 to n-1)
          * For each day i:
            Pop from stack while stack is not empty and arr[i] >= arr[stack.peek()]
            (means previous prices were smaller or equal — they can be included in the span)
            
          * If stack is empty after popping:
            → No higher price before it
            → So, span = i + 1
          
          * Else:
            → Top of stack is the last day with a higher price
            → So, span = i - stack.peek()
          
          Add this span to the result list.
          Push current day index i to the stack.

 Step 5: Return the span list


TimeComplexity : O(n)
SpaceComplexity: O(n)


import java.util.*;

class Solution {
    public ArrayList<Integer> calculateSpan(int[] arr) {
        ArrayList<Integer> span = new ArrayList<>();
        Stack<Integer> st = new Stack<>();
        
        // First element always has span = 1
        span.add(1);
        st.push(0);
        
        for (int i = 1; i < arr.length; i++) {
            while (!st.isEmpty() && arr[i] >= arr[st.peek()]) {
                st.pop();
            }

            if (st.isEmpty()) {
                span.add(i + 1);
            } else {
                int prevHigh = st.peek();
                span.add(i - prevHigh); 
            }

            st.push(i);
        }
        return span;
    }
}
