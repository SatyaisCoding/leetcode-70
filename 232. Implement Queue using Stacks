Approach : Using  two Stacks
   1 :  Create 2 stack , input and output 
   2 :  if output stack is empty , then put all the emelent to the output stack until input is empty 
   3 :  once its done , return peek from output 

TimeComplexity :  
  pop --> O(1)
  push ---> O(1)
  peek --> O(n)
  empty ---> O(1)


class MyQueue {

    private final Stack<Integer> input;
    private final Stack<Integer> output;

    public MyQueue() {
        input  = new Stack<>();
        output = new Stack<>();
    }
    
    public void push(int x) {
        input.push(x);
    }
    
    public int pop() {
        peek();
        return output.pop();
    }
    
    public int peek() {
        if(output.empty()){
            while(!input.empty()){
                output.push(input.pop());
            }
            
        }
        return output.peek();
    }
    
    public boolean empty() {
        return input.empty() && output.empty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
