1st Method : --> 

Approach :-> 

1: For this line of code : Math.min(i + k, n - 1);  
2: we want to check the next 'k' element frm idx i
3: but we can't go beyond the array's last index (n-1)
4: so we take min of (i+k) & (n-1)

Real Line Example   : ->>

Imagine you're reading pages in a book.
You’re on page i, and you want to read the next k pages.
But the book has only n pages.

You can't say:

“I'll read until page i + k” — what if that page doesn’t exist?

Instead, you say:

“I'll read up to the smaller of:

page i + k (what I want), or

the last page n - 1 (what exists).”

// Time complexity: O(n * k)
// Space complexity: O(1)

class Solution {
    public boolean containsNearbyDuplicate(int[] nums, int k) {
        int n = nums.length;

        for (int i = 0; i < n; i++) {
        int end = Math.min(i + k, n - 1);  // Calculate upper limit for j  

        for (int j = i + 1; j <= end; j++) {
            if (nums[i] == nums[j]) {
                return true;
            }
        }
        }
        return false;
    }
}



2nd Method : -> 

// Time complexity: O(n)
// Space complexity: O(n)

Approach ;->

1: Use Sliding window of size (k) with HashSet
2: for each elem in array , check for duplicate in Set & Remove element that fall outside from the window

public boolean containsNearbyDuplicate(int[] nums, int k) {
	Set<Integer> set = new HashSet<Integer>();
	
	for(int i = 0; i < nums.length; i++) {
		if (i > k) 
			set.remove(nums[i-k-1]); 
		
		if (!set.add(nums[i])) 
			return true; 
	}
	
	return false;
}


3rd Mehtod

Approach :-> Using HashMap

// Time complexity: O(n)
// Space complexity: O(n)

public boolean containsNearbyDuplicate(int[] nums, int k) {
	Map<Integer, Integer> map = new HashMap<>();

	for (int i = 0; i < nums.length; i++) {
		if (map.containsKey(nums[i])) {
			if (i - map.get(nums[i]) <= k)
				return true;
		}

		map.put(nums[i], i);
	}

	return false;	
}

    
    


