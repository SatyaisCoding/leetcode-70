Approach : Using Stack
  * Use a stack to keep track of potential next greater elements.
  * Start from the end of the array and move to the left.
  * For each element:
      - Pop elements from the stack while they are less than or equal to the current element.
      - If the stack is empty, there is no greater element → add -1.
      - Else, the top of the stack is the next greater element → add it to the result.
  * Push the current element into the stack.
  * Finally, reverse the result list because we processed from right to left



TimeComplexit : O(n)
SpaceComplexity: O(n)




import java.util.*;

class Solution {
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        Stack<Integer> s = new Stack<>();
        ArrayList<Integer> nextGreaterElem = new ArrayList<>();

        for (int i = arr.length - 1; i >= 0; i--) {
            // Pop all smaller or equal elements
            while (!s.isEmpty() && s.peek() <= arr[i]) {
                s.pop();
            }

            if (s.isEmpty()) {
                nextGreaterElem.add(-1);
            } else {
                nextGreaterElem.add(s.peek());
            }
            s.push(arr[i]);
        }
        Collections.reverse(nextGreaterElem);

        return nextGreaterElem;
    }
}
