Approach :  Using Queue 
 1 : Use a Queue to simulate people standing in line.
 2 : Add all indices (0 to n-1) to the queue (each person represents their index).
 3 : While the queue is not empty:
    Remove the person from the front (poll()).
    Decrease their ticket count by 1.
    Increase total time taken by 1.
    If that person still has tickets left, put them back at the end.
    If it's person k and their ticket count becomes 0, return the time


TimeComplexity : O(T)  T - > sum of all tickets
SpaceComplexity : O(n)



import java.util.*;

class Solution {
    public int timeRequiredToBuy(int[] tickets, int k) {
        Queue<Integer> q = new LinkedList<>();

        for (int i = 0; i < tickets.length; i++) {
            q.offer(i); 
        }

        int timeNeeded = 0;
        
        while (!q.isEmpty()) {
            int idFront = q.poll(); 
            timeNeeded++;
            tickets[idFront]--;

            if (idFront == k && tickets[idFront] == 0) {
                return timeNeeded;
            }

            if (tickets[idFront] > 0) {
                q.offer(idFront);
            }
        }

        return timeNeeded;
    }
}
